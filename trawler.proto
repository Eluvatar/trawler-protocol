//   This file is part of Trawler.
//
//  Trawler is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  Trawler is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with Trawler.  If not, see <http://www.gnu.org/licenses/>.

package trawler;

// The login is sent from the client to the daemon as the first message
// The login contains the user-agent to use for the client
// In future, authentication may be added to the login.
message Login {
    required string user_agent = 1;
}

message Timestamp {
    required int64 seconds = 1;
    required int32 nanos = 2;
}

// The request is sent from the client to the daemon
// The request is understood to identify a URI:
// either GET http://www.nationstates.net/{path}?{query} 
// or POST http://www.nationstates.net/{path} with {query} as postdata
// in any case with any {session} value sent as the cookie
// If the headers boolean is true, the client is asking the daemon
// to return the headers of the request. (Otherwise the headers should be 
// dropped.)
message Request {
    required int32 id = 1;
    // List of HTTP methods from RFC 2616
    enum Method {
        OPTIONS = 0;
        GET     = 1;
        HEAD    = 2;
        POST    = 3;
        PUT     = 4;
        DELETE  = 5;
        TRACE   = 6;
        CONNECT = 7;
    }
    required Method method = 2;
    required string path = 3;
    optional string query = 4;
    optional string session = 5;
    optional bool headers = 6;
    // user_click: Should be set if and only if the request is being made
    //             by immediate user action (i.e. clicking a button)
    //             A given user_click should only initiate one request.
    //             No further user_click actions should be made until the last
    //             request has returned. (The daemon should reject requests
    //             made prior to the conclusion of the last such request).
    optional Timestamp user_click = 7;
}

// The Response is sent to the client when the daemon fulfils a Request and
// receives a response from nationstates.net, and contains the HTTP status code
// as result and the response body as response. Optionally, if the client asked
// for headers, it will also include the response headers as headers.
//
// The Ack is sent as a reply to the client from the daemon when the daemon
// receives a Request. The Ack should unambiguously indicate that the daemon
// has enqueued the Request, and must not be sent until and unless the Request
// is enqueued. The client may assume that an acknowledged Request will be 
// fulfilled unless the connection is closed. The close cousin of Ack is Nack,
// which indicates that the Request will _not_ be fulfilled.
//
// The Logout is sent from the daemon to the client to announce the end of the
// session. Should the client have unacknowledged requests after receiving
// logout, it should treat all of them as NACKed.

message Reply {
    enum ReplyType {
        Response = 0;
        Ack = 1;
        Nack = 2;
        Logout = 3;
    }
    required ReplyType reply_type = 1;
    required int32 req_id = 2;
    // result: for Response: the HTTP status code, for Ack: 0, for Nack: an 
    //         error value:
    //         1500 for generic error, 1501 for unsupported method, 1429 for
    //         click too recent
    required int32 result = 3; 
    // headers: should be bytes and not string because NationStates uses the
    //          windows-1252 encoding (and not utf-8) and headers should be
    //          consistent with response as they are parts of the same data
    //          stream
    optional bytes headers = 4;
    // response: must be bytes and not string because NationStates uses the
    //           windows-1252 encoding (and not utf-8)
    optional bytes response = 5;
    // continued: for Response: set if the response will be continued in
    //            another message
    optional bool continued = 6;
}

